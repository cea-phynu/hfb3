/*==============================================================================*/
/* HFB3                                                                         */
/* Copyright CEA, DAM F-91297 Arpajon, France                                   */
/*                                                                              */
/* This program is free software: you can redistribute it and/or modify         */
/* it under the terms of the GNU General Public License as published by         */
/* the Free Software Foundation, either version 3 of the License, or            */
/* (at your option) any later version.                                          */
/*                                                                              */
/* This program is distributed in the hope that it will be useful,              */
/* but WITHOUT ANY WARRANTY; without even the implied warranty of               */
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                */
/* GNU General Public License for more details.                                 */
/*                                                                              */
/* You should have received a copy of the GNU General Public License            */
/* along with this program.  If not, see <http://www.gnu.org/licenses/>.        */
/*==============================================================================*/

/* change the following list to generate quadratures.h with the given nodes numbers */

list: [1, 2, 3, 10, 14, 16, 18, 20, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 60, 70, 80, 90, 96, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200]$

max_factorial: 128$

fpprec: 100$
linel: 10000$

/* ===== Gauss - Legendre ===== */

gauss_legendre_coeff(n) := block([p, q, v, w, e],
    p: expand(legendre_p(n, x)),
    q: expand(n/2*diff(p, x)*legendre_p(n-1, x)),
    v: sort(map(rhs, bfallroots(p))),
    w: map(lambda([z], 1/subst([x = z], q)), v),
    we: w,
    [map(bfloat, v), map(bfloat, w), map(bfloat, we)])$

gauss_legendre_int(f, a, b, n) := block([u, x, w, c, h],
    u: gauss_legendre_coeff(n),
    x: u[1],
    w: u[2],
    c: bfloat((a+b)/2),
    h: bfloat((b-a)/2),
    h*sum(w[i]*bfloat(f(c+x[i]*h)), i, 1, n))$

/* ===== Gauss - Laguerre ===== */

gauss_laguerre_coeff(n) := block([p, q, v, w, e],
    p: expand(laguerre(n, x)),
    q: x/((n+1)^2*laguerre(n+1, x)^2),
    v: sort(map(rhs, bfallroots(p))),
    w: map(lambda([z], subst([x = z],q)), v),
    we: exp(v) * w,
    [map(bfloat, v), map(bfloat, w), map(bfloat, we)])$

gauss_laguerre_int(f, n) := block([u, x, w],
    u: gauss_laguerre_coeff(n),
    x: u[1],
    w: u[2],
    sum(w[i]*bfloat(f(x[i]))*exp(x[i]), i, 1, n))$

/* ===== Gauss - Hermite ===== */

gauss_hermite_coeff(n) := block([p, q, v, w, e],
    p: expand(hermite(n, x)),
    q: 2^(n+1)*n!*sqrt(%pi)/(hermite(n+1, x)^2),
    v: sort(map(rhs, bfallroots(p))),
    w: map(lambda([z], subst([x = z],q)), v),
    we: exp(v * v) * w,
    [map(bfloat, v), map(bfloat, w), map(bfloat, we)])$

gauss_hermite_int(f, n) := block([u, x, w],
    u: gauss_hermite_coeff(n),
    x: u[1],
    w: u[2],
    sum(w[i]*exp(x[i]^2)*bfloat(f(x[i])), i, 1, n))$

/* ===== Print nodes / weights ===== */

sh: openw("../../src/quadratures.h")$
sdata: openw("../../src/quadratures.data")$


printf(sh,"#ifndef QUADRATURES_H~%")$
printf(sh,"#define QUADRATURES_H~%~%")$
printf(sh,"// Generated by quadratures.max~%~%")$

printf(sh,"#define QUADRATURE_MAX ~d~%~%", list[length(list)])$

printf(sh,"#define GLE_ASSIGN ")$
for i:1 thru length(list) do
(
n: list[i],
printf(sh,"case ~d: n_tab = gle_p~d; w_tab = gle_w~d; we_tab = gle_we~d; break; ", n, n, n, n)
)$
printf(sh,"~%#define GLA_ASSIGN ")$
for i:1 thru length(list) do
(
n: list[i],
printf(sh,"case ~d: n_tab = gla_p~d; w_tab = gla_w~d; we_tab = gla_we~d; break; ", n, n, n, n)
)$
printf(sh,"~%#define GHE_ASSIGN ")$
for i:1 thru length(list) do
(
n: list[i],
printf(sh,"case ~d: n_tab = ghe_p~d; w_tab = ghe_w~d; we_tab = ghe_we~d; break; ", n, n, n, n)
)$
printf(sh,"~%~%")$

for i:1 thru length(list) do
(
n: list[i],

printf(true, "generating Gauss-Legendre quadratures for n=~d...~%", n),
a: gauss_legendre_coeff(n),
printf(sh,"// Gauss - Legendre~%"),
printf(sdata,"// Gauss - Legendre~%"),
printf(sh,"extern double gle_p~d[~d];~%", n, n),
printf(sdata,"double gle_p~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[1][i])),
printf(sdata,"};~%"),
printf(sh,"extern double gle_w~d[~d];~%", n, n),
printf(sdata,"double gle_w~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[2][i])),
printf(sdata,"};~%"),
printf(sh,"extern double gle_we~d[~d];~%", n, n),
printf(sdata,"double gle_we~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[3][i])),
printf(sdata,"};~%"),

printf(true, "generating Gauss-Laguerre quadratures for n=~d...~%", n),
a: gauss_laguerre_coeff(n),
printf(sh,"// Gauss - Laguerre~%"),
printf(sdata,"// Gauss - Laguerre~%"),
printf(sh,"extern double gla_p~d[~d];~%", n, n),
printf(sdata,"double gla_p~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[1][i])),
printf(sdata,"};~%"),
printf(sh,"extern double gla_w~d[~d];~%", n, n),
printf(sdata,"double gla_w~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[2][i])),
printf(sdata,"};~%"),
printf(sh,"extern double gla_we~d[~d];~%", n, n),
printf(sdata,"double gla_we~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[3][i])),
printf(sdata,"};~%"),

printf(true, "generating Gauss-Hermitte quadratures for n=~d...~%", n),
a: gauss_hermite_coeff(n),
printf(sh,"// Gauss - Hermite~%"),
printf(sdata,"// Gauss - Hermite~%"),
printf(sh,"extern double ghe_p~d[~d];~%", n, n),
printf(sdata,"double ghe_p~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[1][i])),
printf(sdata,"};~%"),
printf(sh,"extern double ghe_w~d[~d];~%", n, n),
printf(sdata,"double ghe_w~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[2][i])),
printf(sdata,"};~%"),
printf(sh,"extern double ghe_we~d[~d];~%", n, n),
printf(sdata,"double ghe_we~d[~d] = { ", n, n),
for i:1 thru n do (printf(sdata, "~e,", a[3][i])),
printf(sdata,"};~%")
)$

printf(sh,"// Factorials~%")$
printf(sdata,"// Factorials~%")$
printf(sh,"extern double fact[~d];~%", max_factorial)$
printf(sdata,"double fact[~d] = { ", max_factorial)$
for i:0 thru max_factorial - 1 do (printf(sdata, "~e,", bfloat(i!)))$
printf(sdata,"};~%")$

printf(sh,"// Mnz~%")$
printf(sdata,"// Mnz~%")$
printf(sh,"extern double mnz[~d];~%", max_factorial)$
printf(sdata,"double mnz[~d] = { ", max_factorial)$
for i:0 thru max_factorial - 1 do (printf(sdata, "~e,", bfloat(sqrt(2^i/i!))))$
printf(sdata,"};~%")$

printf(sh,"#endif // QUADRATURES_H~%")$
close(sh)$
close(sdata)$

